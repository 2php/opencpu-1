OpenCPU specification, revised
==============================

Hosting
-------

The new version of OpenCPU can either be hosted locally in R, or in the cloud. 
The ocpu package can be hosted on top of rApache, rstudio, httpuv, and rhttpd.
Loading the package in R with library(ocpu) will automatically start a local server.
Public servers should be deployed with rApache (with enhanced security).


The PGR pattern
---------------

The current version of OpenCPU uses a PGR pattern for all HTTP executions. 
To execute call a function or execute a script, the client needs to perform two steps:

 1) POST: Calls function or executes doc/script. If successful, results in a HTTP 303 redirect to a temporary session dir. The path of the output is inferred from the "Location" response header.
 2) GET:  Retrieves execution output from the tmp session. See below under "Tmp session sub interfaces"

These methods are consistent among different parts of the API, i.e. local packages, user package or packages on github.


State and chaining
-----------------

Calls to OpenCPU are essentially stateless. This means results from one call will not affect the next one.
However, return object from function calls is stored, and can be used as an argument to subsequent calls.
This is done by passing the session id (e.g. x254178965) as an argument to a POST request.


The ocpu root location
----------------------

The root of the opencpu API is relative and can be mounted anywhere. E.g. on rapache it is /ocpu/, on Rook it is /custom/ocpu/ and on httpuv it is /. When creating apps included in a package, the client side code must use relative paths.


Top level API
--------------------

/ocpu/pages                        Documentation
/ocpu/library/package              Packages from site library 
/ocpu/apps/package                 Apps from site library
/ocpu/tmp/x3763c83                 Temporary session
/ocpu/user/jeroen/library/package  Packages from jeroen's home library (unix only)
/ocpu/user/jeroen/apps/package     Apps from jeroen's home library  (unix only)
/ocpu/gist/jeroen/123456           Serve static content from gist. See "Static content API"
/ocpu/github/hadley/ggplot2        Package API from github
/ocpu/doc                          Mimics R help. 


Package / Apps API
-----------------------------

/R/obj/format              GET prints R objects. POST calls functions.
/man/obj/format            GET renders dynamic manuals. Formats are text,html,pdf
/html/*                    GET mimics R help. 
/NEWS                      GET /NEWS  
/DESCRIPTION               GET /DESCRIPTION 
/*                         Serve static content. See "Static content API"



Temporary session API
----------------------

/R/value/json             Renders object. POST loads session to call a function.
/graphics/1/png           Renders plots from an execution. Formats are png, pdf, svg.
/console                  Reproduces console I/O.
/source                   Shows source code.
/warnings                 Show warnings.
/messages                 Show messages.
/stdout                   Show stdout.
/files                    Serve static content. See "Static content API"
/zip                      Exports project dir to zip
/tar                      Exports project dir to tar.gz
/report                   Renders basic report (not implemented)


Output Formats
--------------

Objects can be rendered to various output formats. However, some formats only work for certain types of objects. Common sense.

Format         | Object classes           | Example
---------------------------------------------------------------
 print         | all                      | /library/base/R/glm/print
 ascii         | all                      | /library/base/R/glm/ascii
 rda           | all                      | /library/base/R/glm/rda
 rds           | all                      | /library/base/R/glm/rds
 json          | many (requires RJSONIO)  | /library/datasets/R/cars/json
 md            | many (requires pander)   | /library/datasets/R/cars/md
 csv           | dataframe, matrix        | /library/datasets/R/cars/csv
 tab           | dataframe, matrix        | /library/datasets/R/cars/tab
 bin           | raw objects              | 
 png, svg, pdf | plots                    | /tmp/x1234567/graphics/1/png


Static content API
------------------

OpenCPU can serve static files and directories from various locations, including:

 * Package sub-directories
 * User home directories
 * Gist

Static content locations are interfaced as follows:

  GET: serve the file, basic static web server. Dirlist is machine readable, uses index.html when available.
  POST: execute the script or document (Sweave, knitr, etc) based on the file extention.

The following files can be called using HTTP POST.

File extension | Handler function         | Output 
---------------------------------------------------------------
 * none (fun)  | evaluate(args=POST)      | [all]
 * test.R      | evaluate(file(test.R"))  | [all] (render standard report with /report/pdf or /report/html)
 * file.Rnw    | knitr + texi2dvi         | [all] + file.tex + file.pdf
 * file.Rmd    | knitr + pandoc           | [all] + file.md + file_html
 * file.brew   | brew                     | [all] + file.txt (unless otherwise specified)
 * file.pbrew  | pander.pbrew + pandoc    | [all] + file.md + file_html
 * file.tex    | texi2dvi                 | file.pdf
 * file.md     | pandoc                   | file_html
 * file.dpu    | shell (shebang)          | console only (not implemented)

Arguments for the static content API are fixed.


Function calling POST argument formats
--------------------------------------

The following only holds for HTTP POST to *function calls*.
When using HTTP POST to call a function, POST arguments are matched to the function arguments. 
Most clients use either application/x-www-form-urlencoded or multipart/form-data. Both are OK.
Arguments can be posted in various formats (opencpu auto detects what it is):

 * JSON                              true, false, {"foo" : "bar"}, [1,2,3,4,5], etc
 * Custom R code                     pi*3, rnorm(10), TRUE, FALSE, etc
 * Existing objects                  cars, mtcars, glm, etc
 * File (multipart/form-data only)   Calls function with a temporary path with file.
 * Output object from previous call  x8a6b3f78


API Explorer
------------

OpenCPU ships with a little web client that can be used to poke around in the API. 

 /ocpu/pages/

